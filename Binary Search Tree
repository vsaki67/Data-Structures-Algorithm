public class BinarySearchTree 
{
    // Represents each node in the tree
    static class Node 
    {
        int data;
        Node left, right;

        // Constructor
        public Node(int item) {
            data = item;
            left = right = null;
        }
    }

    // Root node of the BST
    Node root;

    // Constructor for the BinarySearchTree class
    public BinarySearchTree() 
    {
        root = null;
    }

    // Method to insert a new node into the BST
    public void insert(int data) 
    {
        root = insertRec(root, data);
    }

    // A recursive helper function to insert a new node with given data
    private Node insertRec(Node root, int data) 
    {
        // If the tree is empty, return a new node
        if (root == null) {
            root = new Node(data);
            return root;
        }

        // Otherwise, recur down the tree
        if (data < root.data) {
            root.left = insertRec(root.left, data);
        } else if (data > root.data) {
            root.right = insertRec(root.right, data);
        }

        // Return the (unchanged) node pointer
        return root;
    }

    // Method to perform an inorder traversal of the tree
    public void inorder() 
    {
        inorderRec(root);
    }

    // A recursive function to do inorder traversal
    private void inorderRec(Node root) 
    {
        if (root != null) {
            inorderRec(root.left);   // Visit left subtree
            System.out.print(root.data + " "); // Print the root node
            inorderRec(root.right);  // Visit right subtree
        }
    }

    // Method to search a node in the BST
    public boolean search(int data) 
    {
        return searchRec(root, data);
    }

    // A recursive function to search a key in the tree
    private boolean searchRec(Node root, int data) {
        // Base case: root is null or data is present at the node
        if (root == null) {
            return false;
        }

        if (data == root.data) {
            return true;
        }

        // Data is greater than root, search in right subtree
        if (data > root.data) {
            return searchRec(root.right, data);
        }

        // Data is smaller than root, search in left subtree
        return searchRec(root.left, data);
    }

    // Method to find the minimum value node in the tree
    public int findMin() 
    {
        return findMinRec(root);
    }

    // A recursive function to find the minimum value node in the tree
    private int findMinRec(Node root) 
    {
        if (root.left == null) {
            return root.data;
        }
        return findMinRec(root.left);
    }

    public static void main(String[] args) 
    {
        BinarySearchTree bst = new BinarySearchTree();

        // Insert elements into the BST
        bst.insert(50);
        bst.insert(30);
        bst.insert(20);
        bst.insert(40);
        bst.insert(70);
        bst.insert(60);
        bst.insert(80);

        // Print inorder traversal of the BST
        System.out.println("Inorder traversal of the BST:");
        bst.inorder();  // Output: 20 30 40 50 60 70 80

        System.out.println();

        // Search for a value in the BST
        System.out.println("Is 40 present in the BST? " + bst.search(40));  // Output: true
        System.out.println("Is 25 present in the BST? " + bst.search(25));  // Output: false

        // Find the minimum value in the BST
        System.out.println("Minimum value in the BST: " + bst.findMin());  // Output: 20
    }
}
