import java.util.LinkedList;
import java.util.Queue;

class Node 
{
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinaryTree 
{
    Node root;

    boolean isCompleteBinaryTree(Node root) 
    {
        if (root == null) return true;

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        boolean flag = false;

        while (!queue.isEmpty()) {
            Node temp = queue.poll();

            if (temp.left != null) {
                if (flag) return false; // If a non-full node was found earlier
                queue.add(temp.left);
            } else {
                flag = true; // Mark non-full node found
            }

            if (temp.right != null) {
                if (flag) return false;
                queue.add(temp.right);
            } else {
                flag = true;
            }
        }
        return true;
    }

    public static void main(String[] args) 
    {
        BinaryTree tree = new BinaryTree();

        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);

        if (tree.isCompleteBinaryTree(tree.root))
            System.out.println("The tree is a complete binary tree.");
        else
            System.out.println("The tree is NOT a complete binary tree.");
    }
}
