public class MergeSort 
{
    //Function that sorts the array using merge sort
    public static void mergeSort(int[] arr) 
    {
        if (arr.length < 2) {
            return; // If the array has one or fewer elements, it's already sorted
        }

        int mid = arr.length / 2;

        // Split the array into two halves
        int[] left = new int[mid];
        int[] right = new int[arr.length - mid];

        // Copy the elements into left and right sub-arrays
        System.arraycopy(arr, 0, left, 0, mid);
        System.arraycopy(arr, mid, right, 0, arr.length - mid);

        // Recursively sort both halves
        mergeSort(left);
        mergeSort(right);

        // Merge the sorted halves
        merge(arr, left, right);
    }

    // Function to merge two sorted arrays into a single sorted array
    public static void merge(int[] arr, int[] left, int[] right) 
    {
        int i = 0, j = 0, k = 0;

        // Merge the two arrays while comparing their elements
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }

        // Copy any remaining elements from the left array
        while (i < left.length) {
            arr[k++] = left[i++];
        }

        // Copy any remaining elements from the right array
        while (j < right.length) {
            arr[k++] = right[j++];
        }
    }

    // Function to print the array
    public static void printArray(int[] arr) 
    {
        for (int i : arr) {
            System.out.print(i + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) 
    {
        int[] arr = {12, 11, 13, 5, 6, 7};

        System.out.println("Unsorted array:");
        printArray(arr);

        mergeSort(arr);

        System.out.println("Sorted array:");
        printArray(arr);
    }
}
