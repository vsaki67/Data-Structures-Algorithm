package queuestack;

import java.util.NoSuchElementException;

public class Stack 
{
    private int[] arr;    // Array to store stack elements
    private int tos;      // Points to the top element
    private int capacity; // Maximum size of the stack

    // Constructor to initialize the stack
    public Stack(int size) {
        arr = new int[size];
        tos = -1; // Stack is initially empty
        capacity = size;
    }

    // Push an element onto the stack
    public void push(int x) {
        if (tos == capacity - 1) { // Stack overflow
            throw new IllegalStateException("Stack Overflow");
        }
        arr[++tos] = x; // Increment top and add element
    }

    // Pop the top element from the stack
    public int pop() {
        if (isEmpty()) { // Stack underflow
            throw new IllegalStateException("Stack Underflow");
        }
        return arr[tos--]; // Return top element and decrement top
    }

    // Peek at the top element without removing it
    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return arr[tos];
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return tos == -1;
    }
}

class StackQueue 
{
    private Stack stack1; // Stack for enqueue operations
    private Stack stack2; // Stack for dequeue operations

    // Constructor to initialize both stacks
    public StackQueue(int size) {
        stack1 = new Stack(size);
        stack2 = new Stack(size);
    }

    // Enqueue an element into the queue
    public void enqueue(int x) {
        stack1.push(x);
    }

    // Dequeue an element from the queue
    public int dequeue() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty!");
        }

        // If stack2 is empty, transfer elements from stack1 to stack2
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }

        // Pop and return the top element from stack2
        return stack2.pop();
    }

    // Peek at the front element of the queue
    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }

        // If stack2 is empty, transfer elements from stack1 to stack2
        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }

        // Peek at the top element of stack2
        return stack2.peek();
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return stack1.isEmpty() && stack2.isEmpty();
    }
}

public class StackQueueApp {
    public static void main(String[] args) 
    {
        StackQueue queue = new StackQueue(10);

        // Enqueue elements
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);

        // Dequeue elements
        System.out.println(queue.dequeue()); // Outputs 1
        System.out.println(queue.peek());    // Outputs 2

        // Enqueue more elements
        queue.enqueue(4);
        queue.enqueue(5);

        // Dequeue elements
        System.out.println(queue.dequeue()); // Outputs 2
        System.out.println(queue.dequeue()); // Outputs 3
    }
}
